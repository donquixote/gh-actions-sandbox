on:
  release:
    types: [published]
  push:
    tags:
      - '*'

jobs:
  prepare:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      tag: ${{ steps.get_release_tag.outputs.tag || '(??)' }}
    steps:
      - uses: actions/checkout@v2
      - name: Determine the tag name
        id: get_release_tag
        run: |
          set -e
          if [[ "${{ github.event_name }}" == "release" ]]; then
            TAG_NAME=${{ github.event.release.tag_name }}
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME=${{ github.ref_name }}
          else
            echo "Unexpected trigger event '${{ github.event_name }}'."
            exit 1
          fi
          echo "Tag name: $TAG_NAME"
          IS_DRAFT=$(gh release view --json isDraft --jq '.isDraft' $TAG_NAME 2>/dev/null) || true
          if [[ $IS_DRAFT == "false" ]]; then
            echo "There is a public release for '$TAG_NAME'."
            echo "tag=$TAG_NAME" >> "$GITHUB_OUTPUT"
          else
            if [[ $IS_DRAFT == "true" ]]; then
              echo "The release for '$TAG_NAME' is a draft."
            else
              echo "There is no release for '$TAG_NAME'."
            fi
            echo "tag=" >> "$GITHUB_OUTPUT"
          fi
          cat $GITHUB_OUTPUT

  test-gh-commands:
    name: "Release ${{ needs.prepare.outputs.tag }}"
    needs: prepare
    if: ${{ needs.prepare.outputs.tag != '' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - run: 'echo "Value from prepare step: .${{ needs.prepare.outputs.tag }}."'
      - run: |
          set -e
          echo "TAG_NAME=${{ needs.prepare.outputs.tag }}" >> $GITHUB_ENV
          echo $GITHUB_ENV
          cat $GITHUB_ENV
      - run: 'echo "Tag name: $TAG_NAME"'
      - name: "Tag: $TAG_NAME -- ${{ needs.prepare.outputs.tag }}"
        run: ''
      - uses: actions/checkout@v2
      - name: Test gh release list 1
        continue-on-error: true
        run: |
          gh release list
      - name: Test gh release list 2
        continue-on-error: true
        run: |
          set -ex
          gh release list --json name
          gh release list --json name --jq '.[].name'
          gh release list --json tagName,name --jq '.[].name + ", " + .[].tagName'
          gh release list --exclude-drafts
      - run: exit 0
      - name: Test gh release view 1
        continue-on-error: true
        run: |
          gh release view 1.0.0
      - name: Test gh release view 2
        continue-on-error: true
        run: |
          gh release view 1.0.0 --json name --jq '.name'
